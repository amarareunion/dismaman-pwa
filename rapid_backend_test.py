#!/usr/bin/env python3
"""
Rapid Backend Test for Dis Maman! - Focus on Authentication and Key Features
Test rapide de l'authentification et des fonctionnalit√©s cl√©s du backend "Dis Maman !"
"""

import requests
import json
import time
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('/app/frontend/.env')

# Get backend URL from frontend environment
BACKEND_URL = os.environ.get('EXPO_PUBLIC_BACKEND_URL', 'http://localhost:8001')
API_BASE = f"{BACKEND_URL}/api"

class RapidBackendTester:
    def __init__(self):
        self.access_token = None
        self.refresh_token = None
        self.user_id = None
        self.test_user_email = "test@dismaman.fr"
        self.test_user_password = "Test123!"
        self.children = []
        
    def log_test(self, test_name: str, status: str, details: str = ""):
        """Log test results"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        status_symbol = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚ö†Ô∏è"
        print(f"[{timestamp}] {status_symbol} {test_name}: {status}")
        if details:
            print(f"    {details}")
        print()

    def make_request(self, method: str, endpoint: str, data: dict = None, auth_required: bool = True) -> requests.Response:
        """Make HTTP request with proper headers"""
        url = f"{API_BASE}{endpoint}"
        
        headers = {"Content-Type": "application/json"}
        if auth_required and self.access_token:
            headers["Authorization"] = f"Bearer {self.access_token}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, timeout=15)
            elif method.upper() == "POST":
                response = requests.post(url, json=data, headers=headers, timeout=15)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
                
            return response
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Request failed: {e}")
            raise

    def test_authentication_rapid(self) -> bool:
        """Test d'authentification rapide avec test@dismaman.fr / Test123!"""
        test_name = "Authentication Rapide"
        
        try:
            print("üîê Test d'authentification avec test@dismaman.fr / Test123!")
            
            # Test login
            login_data = {
                "email": self.test_user_email,
                "password": self.test_user_password
            }
            
            response = self.make_request("POST", "/auth/token", login_data, auth_required=False)
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data["access_token"]
                self.refresh_token = data["refresh_token"]
                self.user_id = data["user"]["id"]
                
                # Verify JWT token format
                if self.access_token and len(self.access_token.split('.')) == 3:
                    self.log_test(test_name, "PASS", f"‚úÖ Connexion r√©ussie - JWT token g√©n√©r√© correctement")
                    return True
                else:
                    self.log_test(test_name, "FAIL", "‚ùå Token JWT invalide")
                    return False
            else:
                self.log_test(test_name, "FAIL", f"‚ùå √âchec connexion: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test(test_name, "FAIL", f"‚ùå Exception: {str(e)}")
            return False

    def test_monetization_api_rapid(self) -> bool:
        """Test de l'API de mon√©tisation avec authentification"""
        test_name = "API Mon√©tisation"
        
        try:
            print("üí∞ Test GET /api/monetization/status avec authentification")
            
            response = self.make_request("GET", "/monetization/status")
            
            if response.status_code == 200:
                data = response.json()
                required_fields = ["is_premium", "trial_days_left", "questions_asked", "popup_frequency"]
                
                # V√©rifier tous les champs requis
                missing_fields = [field for field in required_fields if field not in data]
                if missing_fields:
                    self.log_test(test_name, "FAIL", f"‚ùå Champs manquants: {missing_fields}")
                    return False
                
                # V√©rifier les types de donn√©es
                if not isinstance(data["is_premium"], bool):
                    self.log_test(test_name, "FAIL", f"‚ùå is_premium doit √™tre boolean")
                    return False
                
                if not isinstance(data["trial_days_left"], int):
                    self.log_test(test_name, "FAIL", f"‚ùå trial_days_left doit √™tre integer")
                    return False
                
                premium_status = "Premium" if data["is_premium"] else "Trial/Free"
                trial_days = data["trial_days_left"]
                questions = data["questions_asked"]
                popup = data["popup_frequency"]
                
                self.log_test(test_name, "PASS", 
                    f"‚úÖ Statut: {premium_status}, Trial: {trial_days}j, Questions: {questions}, Popup: {popup}")
                return True
            else:
                self.log_test(test_name, "FAIL", f"‚ùå Status: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test(test_name, "FAIL", f"‚ùå Exception: {str(e)}")
            return False

    def test_children_api_rapid(self) -> bool:
        """Test des API enfants - v√©rifier acc√®s √† la liste"""
        test_name = "API Enfants"
        
        try:
            print("üë∂ Test GET /api/children pour v√©rifier acc√®s liste enfants")
            
            response = self.make_request("GET", "/children")
            
            if response.status_code == 200:
                data = response.json()
                
                if not isinstance(data, list):
                    self.log_test(test_name, "FAIL", f"‚ùå R√©ponse doit √™tre une liste, re√ßu: {type(data)}")
                    return False
                
                self.children = data
                children_count = len(data)
                
                # V√©rifier structure des enfants si il y en a
                if children_count > 0:
                    child = data[0]
                    required_fields = ["id", "name", "gender", "age_months"]
                    missing_fields = [field for field in required_fields if field not in child]
                    
                    if missing_fields:
                        self.log_test(test_name, "FAIL", f"‚ùå Champs manquants dans enfant: {missing_fields}")
                        return False
                
                self.log_test(test_name, "PASS", f"‚úÖ Liste enfants accessible - {children_count} enfant(s) trouv√©(s)")
                return True
            else:
                self.log_test(test_name, "FAIL", f"‚ùå Status: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test(test_name, "FAIL", f"‚ùå Exception: {str(e)}")
            return False

    def test_ai_question_basic(self) -> bool:
        """Test de question basique pour v√©rifier que l'IA fonctionne"""
        test_name = "Question IA Basique"
        
        try:
            print("ü§ñ Test POST /api/questions avec question simple")
            
            if not self.children:
                self.log_test(test_name, "SKIP", "‚ö†Ô∏è Aucun enfant disponible pour test IA")
                return True
            
            # Utiliser le premier enfant disponible
            child_id = self.children[0]["id"]
            child_name = self.children[0]["name"]
            
            question_data = {
                "question": "Pourquoi le ciel est-il bleu?",
                "child_id": child_id
            }
            
            response = self.make_request("POST", "/questions", question_data)
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get("answer", "")
                
                # V√©rifier que ce n'est pas une r√©ponse d'erreur
                if "je n'ai pas pu r√©pondre" in answer.lower() or "redemander" in answer.lower():
                    self.log_test(test_name, "FAIL", f"‚ùå R√©ponse d'erreur IA: {answer[:100]}...")
                    return False
                
                # V√©rifier que la r√©ponse contient le nom de l'enfant (personnalisation)
                if child_name.lower() not in answer.lower():
                    self.log_test(test_name, "WARN", f"‚ö†Ô∏è R√©ponse non personnalis√©e (nom enfant absent)")
                
                # V√©rifier que c'est une vraie r√©ponse scientifique
                sky_keywords = ["bleu", "lumi√®re", "soleil", "air", "particules"]
                if not any(keyword in answer.lower() for keyword in sky_keywords):
                    self.log_test(test_name, "WARN", f"‚ö†Ô∏è R√©ponse ne semble pas scientifique")
                
                response_length = len(answer)
                self.log_test(test_name, "PASS", 
                    f"‚úÖ IA fonctionne - R√©ponse g√©n√©r√©e ({response_length} caract√®res) pour {child_name}")
                return True
            else:
                self.log_test(test_name, "FAIL", f"‚ùå Status: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test(test_name, "FAIL", f"‚ùå Exception: {str(e)}")
            return False

    def run_rapid_tests(self):
        """Ex√©cuter tous les tests rapides"""
        print("=" * 80)
        print("üöÄ TEST RAPIDE BACKEND 'DIS MAMAN !' - FOCUS AUTHENTIFICATION")
        print("=" * 80)
        print(f"üåê Backend URL: {BACKEND_URL}")
        print(f"üìß Test User: {self.test_user_email}")
        print("=" * 80)
        print()
        
        tests = [
            ("1. Authentification", self.test_authentication_rapid),
            ("2. API Mon√©tisation", self.test_monetization_api_rapid),
            ("3. API Enfants", self.test_children_api_rapid),
            ("4. Question IA", self.test_ai_question_basic),
        ]
        
        results = []
        
        for test_desc, test_func in tests:
            print(f"üîÑ Ex√©cution: {test_desc}")
            try:
                result = test_func()
                results.append((test_desc, result))
            except Exception as e:
                print(f"‚ùå Erreur critique dans {test_desc}: {e}")
                results.append((test_desc, False))
            print("-" * 50)
        
        # R√©sum√© final
        print("\n" + "=" * 80)
        print("üìä R√âSUM√â DES TESTS RAPIDES")
        print("=" * 80)
        
        passed = 0
        total = len(results)
        
        for test_desc, result in results:
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{status} {test_desc}")
            if result:
                passed += 1
        
        print("-" * 80)
        print(f"üìà R√©sultat: {passed}/{total} tests r√©ussis ({(passed/total)*100:.1f}%)")
        
        if passed == total:
            print("üéâ TOUS LES TESTS BACKEND SONT PASS√âS!")
            print("‚úÖ Le backend fonctionne correctement")
            print("üîç Si probl√®me frontend, c'est c√¥t√© interface utilisateur")
        else:
            print("‚ö†Ô∏è PROBL√àMES D√âTECT√âS DANS LE BACKEND")
            print("üîß Corrections n√©cessaires avant test frontend")
        
        print("=" * 80)
        
        return passed == total

if __name__ == "__main__":
    tester = RapidBackendTester()
    success = tester.run_rapid_tests()
    exit(0 if success else 1)